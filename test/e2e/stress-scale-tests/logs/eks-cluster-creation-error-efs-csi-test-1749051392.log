STDOUT:
2025-06-04 15:36:32 [▶]  Setting credentials expiry window to 30 minutes
2025-06-04 15:36:33 [▶]  role ARN for the current session is "arn:aws:sts::745939127895:assumed-role/Admin/ibhard-Isengard"
2025-06-04 15:36:33 [ℹ]  eksctl version 0.208.0
2025-06-04 15:36:33 [ℹ]  using region us-west-2
2025-06-04 15:36:33 [!]  Amazon EKS will no longer publish EKS-optimized Amazon Linux 2 (AL2) AMIs after November 26th, 2025. Additionally, Kubernetes version 1.32 is the last version for which Amazon EKS will release AL2 AMIs. From version 1.33 onwards, Amazon EKS will continue to release AL2023 and Bottlerocket based AMIs. The default AMI family when creating clusters and nodegroups in Eksctl will be changed to AL2023 in the future.
2025-06-04 15:36:33 [▶]  determining availability zones
2025-06-04 15:36:33 [ℹ]  setting availability zones to [us-west-2d us-west-2a us-west-2c]
2025-06-04 15:36:33 [▶]  VPC CIDR (192.168.0.0/16) was divided into 8 subnets [192.168.0.0/19 192.168.32.0/19 192.168.64.0/19 192.168.96.0/19 192.168.128.0/19 192.168.160.0/19 192.168.192.0/19 192.168.224.0/19]
2025-06-04 15:36:33 [ℹ]  subnets for us-west-2d - public:192.168.0.0/19 private:192.168.96.0/19
2025-06-04 15:36:33 [ℹ]  subnets for us-west-2a - public:192.168.32.0/19 private:192.168.128.0/19
2025-06-04 15:36:33 [ℹ]  subnets for us-west-2c - public:192.168.64.0/19 private:192.168.160.0/19
2025-06-04 15:36:33 [▶]  resolving AMI using SSM Parameter resolver for region us-west-2, instanceType t3.large and imageFamily AmazonLinux2
2025-06-04 15:36:34 [ℹ]  nodegroup "ng-1" will use "ami-0ff76e62eff72da2a" [AmazonLinux2/1.28]
2025-06-04 15:36:34 [ℹ]  using Kubernetes version 1.28
2025-06-04 15:36:34 [ℹ]  creating EKS cluster "efs-csi-test-1749051392" in "us-west-2" region with un-managed nodes
2025-06-04 15:36:34 [▶]  cfg.json = \
{
    "kind": "ClusterConfig",
    "apiVersion": "eksctl.io/v1alpha5",
    "metadata": {
        "name": "efs-csi-test-1749051392",
        "region": "us-west-2",
        "version": "1.28"
    },
    "iam": {
        "withOIDC": true,
        "serviceAccounts": [
            {
                "metadata": {
                    "name": "efs-csi-controller-sa",
                    "namespace": "kube-system"
                },
                "attachPolicyARNs": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEFSCSIDriverPolicy"
                ],
                "wellKnownPolicies": {
                    "imageBuilder": false,
                    "autoScaler": false,
                    "awsLoadBalancerController": false,
                    "externalDNS": false,
                    "certManager": false,
                    "ebsCSIController": false,
                    "efsCSIController": false
                }
            }
        ],
        "vpcResourceControllerPolicy": true
    },
    "accessConfig": {
        "authenticationMode": "API_AND_CONFIG_MAP"
    },
    "vpc": {
        "cidr": "192.168.0.0/16",
        "subnets": {
            "private": {
                "us-west-2a": {
                    "az": "us-west-2a",
                    "cidr": "192.168.128.0/19"
                },
                "us-west-2c": {
                    "az": "us-west-2c",
                    "cidr": "192.168.160.0/19"
                },
                "us-west-2d": {
                    "az": "us-west-2d",
                    "cidr": "192.168.96.0/19"
                }
            },
            "public": {
                "us-west-2a": {
                    "az": "us-west-2a",
                    "cidr": "192.168.32.0/19"
                },
                "us-west-2c": {
                    "az": "us-west-2c",
                    "cidr": "192.168.64.0/19"
                },
                "us-west-2d": {
                    "az": "us-west-2d",
                    "cidr": "192.168.0.0/19"
                }
            }
        },
        "manageSharedNodeSecurityGroupRules": true,
        "autoAllocateIPv6": false,
        "nat": {
            "gateway": "Single"
        },
        "clusterEndpoints": {
            "privateAccess": false,
            "publicAccess": true
        }
    },
    "addonsConfig": {},
    "privateCluster": {
        "enabled": false,
        "skipEndpointCreation": false
    },
    "nodeGroups": [
        {
            "name": "ng-1",
            "amiFamily": "AmazonLinux2",
            "instanceType": "t3.large",
            "desiredCapacity": 3,
            "minSize": 2,
            "maxSize": 5,
            "volumeSize": 80,
            "ssh": {
                "allow": false
            },
            "labels": {
                "alpha.eksctl.io/cluster-name": "efs-csi-test-1749051392",
                "alpha.eksctl.io/nodegroup-name": "ng-1",
                "efs-issue": "true",
                "role": "general"
            },
            "privateNetworking": false,
            "tags": {
                "nodegroup-role": "general"
            },
            "iam": {
                "attachPolicy": {
                    "Statement": [
                        {
                            "Action": [
                                "elasticfilesystem:DescribeAccessPoints",
                                "elasticfilesystem:DescribeFileSystems",
                                "elasticfilesystem:DescribeMountTargets",
                                "ec2:DescribeAvailabilityZones"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "elasticfilesystem:CreateAccessPoint"
                            ],
                            "Condition": {
                                "StringLike": {
                                    "aws:RequestTag/kubernetes.io/cluster/*": "owned"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "elasticfilesystem:DeleteAccessPoint"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "aws:ResourceTag/kubernetes.io/cluster/*": "owned"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "withAddonPolicies": {
                    "imageBuilder": false,
                    "autoScaler": false,
                    "externalDNS": false,
                    "certManager": false,
                    "appMesh": null,
                    "appMeshPreview": null,
                    "ebs": false,
                    "fsx": false,
                    "efs": false,
                    "awsLoadBalancerController": false,
                    "albIngress": false,
                    "xRay": false,
                    "cloudWatch": false
                }
            },
            "ami": "ami-0ff76e62eff72da2a",
            "securityGroups": {
                "withShared": true,
                "withLocal": true
            },
            "volumeType": "gp3",
            "volumeName": "/dev/xvda",
            "volumeEncrypted": false,
            "volumeIOPS": 3000,
            "volumeThroughput": 125,
            "disableIMDSv1": true,
            "disablePodIMDS": false,
            "instanceSelector": {},
            "containerRuntime": "containerd"
        }
    ],
    "availabilityZones": [
        "us-west-2d",
        "us-west-2a",
        "us-west-2c"
    ]
}

2025-06-04 15:36:34 [ℹ]  1 nodegroup (ng-1) was included (based on the include/exclude rules)
2025-06-04 15:36:34 [ℹ]  will create a CloudFormation stack for cluster itself and 1 nodegroup stack(s)
2025-06-04 15:36:34 [ℹ]  if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=us-west-2 --cluster=efs-csi-test-1749051392'
2025-06-04 15:36:34 [ℹ]  Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster "efs-csi-test-1749051392" in "us-west-2"
2025-06-04 15:36:34 [ℹ]  CloudWatch logging will not be enabled for cluster "efs-csi-test-1749051392" in "us-west-2"
2025-06-04 15:36:34 [ℹ]  you can enable it with 'eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=us-west-2 --cluster=efs-csi-test-1749051392'
2025-06-04 15:36:34 [ℹ]  default addons kube-proxy, coredns, metrics-server, vpc-cni were not specified, will install them as EKS addons
2025-06-04 15:36:34 [ℹ]  
2 sequential tasks: { create cluster control plane "efs-csi-test-1749051392", 
    2 sequential sub-tasks: { 
        5 sequential sub-tasks: { 
            1 task: { create addons },
            wait for control plane to become ready,
            associate IAM OIDC provider,
            2 sequential sub-tasks: { 
                create IAM role for serviceaccount "kube-system/efs-csi-controller-sa",
                create serviceaccount "kube-system/efs-csi-controller-sa",
            },
            update VPC CNI to use IRSA if required,
        },
        create nodegroup "ng-1",
    } 
}
2025-06-04 15:36:34 [▶]  started task: create cluster control plane "efs-csi-test-1749051392"
2025-06-04 15:36:34 [ℹ]  building cluster stack "eksctl-efs-csi-test-1749051392-cluster"
2025-06-04 15:36:34 [▶]  CreateStackInput = &cloudformation.CreateStackInput{StackName:(*string)(0xc000f5db00), Capabilities:[]types.Capability{"CAPABILITY_IAM"}, ClientRequestToken:(*string)(nil), DisableRollback:(*bool)(0xc00063aed8), EnableTerminationProtection:(*bool)(nil), NotificationARNs:[]string(nil), OnFailure:"", Parameters:[]types.Parameter(nil), ResourceTypes:[]string(nil), RetainExceptOnCreate:(*bool)(nil), RoleARN:(*string)(nil), RollbackConfiguration:(*types.RollbackConfiguration)(nil), StackPolicyBody:(*string)(nil), StackPolicyURL:(*string)(nil), Tags:[]types.Tag{types.Tag{Key:(*string)(0xc000cdb8d0), Value:(*string)(0xc000cdb8e0), noSmithyDocumentSerde:document.NoSerde{}}, types.Tag{Key:(*string)(0xc000cdb8f0), Value:(*string)(0xc000cdb900), noSmithyDocumentSerde:document.NoSerde{}}, types.Tag{Key:(*string)(0xc000cdb910), Value:(*string)(0xc000cdb920), noSmithyDocumentSerde:document.NoSerde{}}, types.Tag{Key:(*string)(0xc000f718c0), Value:(*string)(0xc000f718d0), noSmithyDocumentSerde:document.NoSerde{}}}, TemplateBody:(*string)(0xc000f718e0), TemplateURL:(*string)(nil), TimeoutInMinutes:(*int32)(nil), noSmithyDocumentSerde:document.NoSerde{}}
2025-06-04 15:36:34 [ℹ]  deploying stack "eksctl-efs-csi-test-1749051392-cluster"
2025-06-04 15:37:04 [ℹ]  waiting for CloudFormation stack "eksctl-efs-csi-test-1749051392-cluster"
2025-06-04 15:37:05 [✖]  unexpected status "ROLLBACK_IN_PROGRESS" while waiting for CloudFormation stack "eksctl-efs-csi-test-1749051392-cluster"
2025-06-04 15:37:05 [✖]  unexpected status "ROLLBACK_IN_PROGRESS" while waiting for CloudFormation stack "eksctl-efs-csi-test-1749051392-cluster"
2025-06-04 15:37:05 [ℹ]  fetching stack events in attempt to troubleshoot the root cause of the failure
2025-06-04 15:37:05 [▶]  AWS::IAM::Role/ServiceRole: DELETE_COMPLETE
2025-06-04 15:37:05 [▶]  AWS::EC2::EIP/NATIP: DELETE_COMPLETE
2025-06-04 15:37:05 [!]  AWS::IAM::Role/ServiceRole: DELETE_IN_PROGRESS
2025-06-04 15:37:05 [!]  AWS::EC2::EIP/NATIP: DELETE_IN_PROGRESS
2025-06-04 15:37:05 [▶]  AWS::CloudFormation::Stack/eksctl-efs-csi-test-1749051392-cluster: ROLLBACK_IN_PROGRESS – "The following resource(s) failed to create: [InternetGateway, ServiceRole, NATIP, VPC]. Rollback requested by user."
2025-06-04 15:37:05 [✖]  AWS::EC2::EIP/NATIP: CREATE_FAILED – "Resource creation cancelled"
2025-06-04 15:37:05 [✖]  AWS::IAM::Role/ServiceRole: CREATE_FAILED – "Resource creation cancelled"
2025-06-04 15:37:05 [▶]  AWS::EC2::EIP/NATIP: CREATE_IN_PROGRESS – "Resource creation Initiated"
2025-06-04 15:37:05 [✖]  AWS::EC2::VPC/VPC: CREATE_FAILED – "Resource handler returned message: \"The maximum number of VPCs has been reached. (Service: Ec2, Status Code: 400, Request ID: 12f2bdae-04a6-4aea-8573-1101de3244a7) (SDK Attempt Count: 1)\" (RequestToken: 06fa18f0-e50e-789e-41a0-492077692cf3, HandlerErrorCode: GeneralServiceException)"
2025-06-04 15:37:05 [✖]  AWS::EC2::InternetGateway/InternetGateway: CREATE_FAILED – "Resource handler returned message: \"The maximum number of internet gateways has been reached. (Service: Ec2, Status Code: 400, Request ID: e67da527-78fd-41bd-be9f-ce04d9ba2a26) (SDK Attempt Count: 1)\" (RequestToken: 6f816c80-7115-5bdf-5120-3a7099dbe90d, HandlerErrorCode: ServiceLimitExceeded)"
2025-06-04 15:37:05 [▶]  AWS::EC2::InternetGateway/InternetGateway: CREATE_IN_PROGRESS
2025-06-04 15:37:05 [▶]  AWS::IAM::Role/ServiceRole: CREATE_IN_PROGRESS
2025-06-04 15:37:05 [▶]  AWS::EC2::EIP/NATIP: CREATE_IN_PROGRESS
2025-06-04 15:37:05 [▶]  AWS::EC2::VPC/VPC: CREATE_IN_PROGRESS
2025-06-04 15:37:05 [▶]  AWS::CloudFormation::Stack/eksctl-efs-csi-test-1749051392-cluster: CREATE_IN_PROGRESS – "User Initiated"
2025-06-04 15:37:05 [▶]  failed task: create cluster control plane "efs-csi-test-1749051392" (will not run other sequential tasks)
2025-06-04 15:37:05 [!]  1 error(s) occurred and cluster hasn't been created properly, you may wish to check CloudFormation console
2025-06-04 15:37:05 [ℹ]  to cleanup resources, run 'eksctl delete cluster --region=us-west-2 --name=efs-csi-test-1749051392'
2025-06-04 15:37:05 [✖]  ResourceNotReady: failed waiting for successful resource state


STDERR:
Error: failed to create cluster "efs-csi-test-1749051392"
